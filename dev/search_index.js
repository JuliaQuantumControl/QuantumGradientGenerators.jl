var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = QuantumGradientGenerators","category":"page"},{"location":"#QuantumGradientGenerators","page":"Home","title":"QuantumGradientGenerators","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for QuantumGradientGenerators.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [QuantumGradientGenerators]","category":"page"},{"location":"#QuantumGradientGenerators.GradGenerator","page":"Home","title":"QuantumGradientGenerators.GradGenerator","text":"Extended generator for the standard dynamic gradient.\n\nG̃ = GradGenerator(G)\n\ncontains the original time-dependent generator G (a Hamiltonian or Liouvillian) in G̃.G, a vector of control derivatives Gϵₗ(t) in G̃.control_derivs, and the controls in G̃.controls.\n\nFor a generator G = H(t) = H₀ + ϵ₁(t) H₁ +  +  ϵₙ(t) Hₙ, this extended generator encodes the block-matrix\n\nG = beginpmatrix\n         H(t)    0      dots     0       H₁     \n         0       H(t)   dots     0       H₂     \n    vdots              ddots            vdots \n         0       0      dots     H(t)    Hₙ     \n         0       0      dots     0       H(t)\nendpmatrix\n\nNote that the Gϵₗ(t) (Hₗ in the above example) may be time-dependent, to account for the possibility of non-linear control terms.\n\n\n\n\n\n","category":"type"},{"location":"#QuantumGradientGenerators.GradVector","page":"Home","title":"QuantumGradientGenerators.GradVector","text":"Extended state-vector for the dynamic gradient.\n\nΨ̃ = GradVector(Ψ, num_controls)\n\nfor an initial state Ψ and num_controls control fields.\n\nThe GradVector conceptually corresponds to a direct-sum (block) column-vector Ψ = (Ψ₁ Ψ₂  Ψₙ Ψ)^T, where n is num_controls. With a matching G as in the documentation of GradGenerator, we have\n\nG Ψ = beginpmatrix\nH Ψ₁ + H₁Ψ \nvdots \nH Ψₙ + HₙΨ \nH Ψ\nendpmatrix\n\nand\n\ne^-i G dt beginpmatrix 0  vdots  0  Ψ endpmatrix\n= beginpmatrix\nfracϵ₁ e^-i H dt Ψ \nvdots \nfracϵₙ e^-i H dt Ψ \ne^-i H dt Ψ\nendpmatrix\n\n\n\n\n\n","category":"type"},{"location":"#QuantumGradientGenerators.GradgenOperator","page":"Home","title":"QuantumGradientGenerators.GradgenOperator","text":"Static generator for the dynamic gradient.\n\nG::GradgenOperator = evaluate(gradgen::GradGenerator; vals_dict)\n\nis the result of plugging in specific values for all controls in a GradGenerator. See evaluate and evaluate!.\n\nThe resulting object can be multiplied directly with a GradVector, e.g., in the process of evaluating a piecewise-constant time propagation.\n\n\n\n\n\n","category":"type"},{"location":"#QuantumGradientGenerators.resetgradvec!-Tuple{GradVector}","page":"Home","title":"QuantumGradientGenerators.resetgradvec!","text":"Reset the given gradient vector for a new gradient evaluation.\n\nresetgradvec!(Ψ̃::GradVector)\n\nzeroes out Ψ̃.grad_states but leaves Ψ̃.state unaffected.\n\nresetgradvec!(Ψ̃::GradVector, Ψ)\n\nadditionally sets Ψ̃.state to Ψ.\n\n\n\n\n\n","category":"method"}]
}
